numargs <- latexArgCount[a]
if (!is.na(numargs)) { # Do we know this macro?
args <- vector("list", numargs)
j <- i
getNext <- TRUE
k <- 1L
while (k <= numargs) {
if (getNext) {
j <- j + 1L
if (j > length(x)) {
warning("argument for ", c(a), " not found", domain = NA)
nextobj <- latex_tag("", "TEXT")
nexttag <- "TEXT"
nextchars <- ""
} else {
nextobj <- x[[j]]
nexttag <- attr(nextobj, "latex_tag")
if (nexttag == "TEXT")
nextchars <- strsplit(nextobj, "")[[1L]]
}
getNext <- FALSE
}
switch(nexttag,
TEXT = {
args[[k]] <- latex_tag(nextchars[1L], "TEXT")
nextchars <- nextchars[-1L]
if (!length(nextchars)) getNext <- TRUE
if (args[[k]] %in% whitespace) next
k <- k+1L
},
COMMENT = getNext <- TRUE, # strip comments
BLOCK =,
ENVIRONMENT =,
MATH = {
args[[k]] <- latexToUtf8(nextobj)
k <- k+1L
getNext <- TRUE
},
NULL = stop("Internal error:  NULL tag", domain = NA))
}
index <- a
for (i1 in seq_along(args)) {
if (is.null(latexTable[[index]])) break
nextobj1 <- args[[i1]]
nexttag1 <- attr(nextobj1, "latex_tag")
index <- c(index, switch(nexttag1,
MACRO =,
TEXT = nextobj1,
BLOCK = deparseLatex(nextobj1, dropBraces=TRUE)))
}
subst <- latex_tag(latexTable[[index]], "TEXT")
if (!is.null(subst) && !is.list(subst)) { # We've made a substitution, which will always
# be a new latex object, possibly containing UTF8
x[[i]] <- subst
if (numargs) {
if (nexttag == "TEXT" && length(nextchars)) {
# We've partially used up the next one, so rebuild it
nextobj[1L] <- paste(nextchars, collapse="")
x[[j]] <- nextobj
j <- j-1L
}
while (j > i) {
# Remove the used up args
x[[j]] <- NULL
j <- j-1L
}
}
} else
i <- j
}
} else if (tag == "BLOCK")
x[[i]] <- latexToUtf8(a)
}
x
}
latexToUtf8(bib)
length(bib)
bib
parseLatex(bib)
install.packages("parser")
library("parser", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
Pandoc.brew(file="~/Documents/galls-parasitoids/review.html", output=tempfile(), convert="pdf")
knit(input="~/Documents/galls-parasitoids/review.html")
Pandoc.brew(file="~/Documents/galls-parasitoids/review.md", output=tempfile(), convert="pdf")
install.packages("markdown")
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
Pandoc.brew(file="~/Documents/galls-parasitoids/review.html", output=tempfile(), convert="pdf", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.html", output=tempfile(), convert="pdf", graph.hi.res=TRUE)
Pandoc.brew(system.file('examples/graphs.brew', package='pander'), output = tempfile(), convert = 'html')
Pandoc.brew(file="~/Documents/galls-parasitoids/review.RMD", output=tempfile(), convert="html", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.RMD", output="~/Documents/galls-parasitoids/reviewtest", convert="html", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.RMD", output=tempfile(), convert="html", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.test.txt", output=tempfile(), convert="pdf", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.test", output=tempfile(), convert="pdf", graph.hi.res=TRUE)
Pandoc.brew(file="~/Documents/galls-parasitoids/review.test", output=tempfile(), convert="pdf", graph.hi.res=TRUE)
install.packages("digest")
library("digest", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
Pandoc.brew(system.file('~/Documents/galls-parasitoids/review.Rmd', package='pander'), output=tempfile(), convert="pdf")
library("pander", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
Pandoc.brew(system.file('~/Documents/galls-parasitoids/review.Rmd', package='pander'), output=tempfile(), convert="pdf")
Pandoc.brew(system.file('~/Documents/galls-parasitoids/review.Rmd', package='pander'), output=tempfile(), convert='pdf')
options(rstudio.markdownToHTML =
function(review.Rmd, outputFile) {
system(paste("pandoc", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
library("markdown", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
install.packages("pander")
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
system(paste("pandoc", shQuote(inputFile), "-o", shQuote(outputFile)))
}
)
options
options(rstudio.markdownToHTML =
function(inputFile, outputFile) {
require(markdown)
markdownToHTML(inputFile, outputFile)
}
)
install.packages("sweave")
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/2.15/Resources/library")
par(mfrow=c(2,1), mar=c(0,4,3,2)+0.1)
curve(splinefxn, 2,8, ylim=c(0,12), xlim=c(0,10), ylab="Gall Size", xlab="",lwd=3, las=1, xaxt="n")
abline(h=6, col=2, lty=2)
abline(h=8, col=2, lty=2)
as.data.frame(gallSpline) # use this to see where lines intersect on graph
abline(v=5, col=3, lty=3)
abline(v=5.65, col=3, lty=3)
# difference between vertical ablines suggest that this gall is only susceptible to this parasitoid species for 4.55 days or ~1/3 of a week.
## parasitoid density figure
par(mar=c(4,4,0,2)+0.1)
u <- 4 # mean weak of emergence
sd <- 1 # standard deviation
curve(1/(sqrt(2*3.14)*sd)*exp(-(x-u)^2/(2*sd^2)), from = 1, to = 8, ylab="Density", xlab="Time", ylim=c(0,0.6), xlim=c(0,10))
abline(v=4, col=1, lty=2)
abline(v=5, col=3, lty=3)
abline(v=5.65, col=3, lty=3)
# note that by looking at probability of a certain spline function surviving at different starts times, may give a good indication whether growth rate or emergence time is unders selection.
curve(splinefxn, 2,8, ylim=c(0,12), xlim=c(0,10), ylab="Gall Size", xlab="",lwd=3, las=1, xaxt="n")
time <- 2:8 # start 2 weeks after "beginning of season" with about a 6 week growth period
gallsize <- c(0,1,3,6,9,10,10)
gallSpline <- spline(time,gallsize)
splinefxn <- splinefun(time,gallsize) # need to see how I can get the actual function from this, mig
par(mfrow=c(2,1), mar=c(0,4,3,2)+0.1)
curve(splinefxn, 2,8, ylim=c(0,12), xlim=c(0,10), ylab="Gall Size", xlab="",lwd=3, las=1, xaxt="n")
abline(h=6, col=2, lty=2)
abline(h=8, col=2, lty=2)
as.data.frame(gallSpline) # use this to see where lines intersect on graph
abline(v=5, col=3, lty=3)
abline(v=5.65, col=3, lty=3)
# difference between vertical ablines suggest that this gall is only susceptible to this parasitoid species for 4.55 days or ~1/3 of a week.
## parasitoid density figure
par(mar=c(4,4,0,2)+0.1)
u <- 4 # mean weak of emergence
sd <- 1 # standard deviation
curve(1/(sqrt(2*3.14)*sd)*exp(-(x-u)^2/(2*sd^2)), from = 1, to = 8, ylab="Density", xlab="Time", ylim=c(0,0.6), xlim=c(0,10))
abline(v=4, col=1, lty=2)
abline(v=5, col=3, lty=3)
abline(v=5.65, col=3, lty=3)
par(mfrow=c(1,2))
web1 <- matrix(c(1,9,5,9,1,5), nrow=2, byrow=T)
web2 <- matrix(c(9,1,5,1,9,5), nrow=2, byrow=T)
rownames(web1) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web1) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
rownames(web2) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web2) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
community <- matrix(c(15,15,10,10,15,15,10,10), nrow=2, byrow=T)
colnames(community) <- c("Gall sp. 1", "Gall sp. 2", "Parasitoid sp. 1", "Parasitoid sp. 2")
rownames(community) <- c("Site 1", "Site 2")
site1 <- c("a) Site 1")
site2 <- c("b) Site 2")
visweb(web1, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site1)
visweb(web2, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site2)
print(community)
library(bipartite)
par(mfrow=c(1,2))
web1 <- matrix(c(1,9,5,9,1,5), nrow=2, byrow=T)
web2 <- matrix(c(9,1,5,1,9,5), nrow=2, byrow=T)
rownames(web1) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web1) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
rownames(web2) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web2) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
community <- matrix(c(15,15,10,10,15,15,10,10), nrow=2, byrow=T)
colnames(community) <- c("Gall sp. 1", "Gall sp. 2", "Parasitoid sp. 1", "Parasitoid sp. 2")
rownames(community) <- c("Site 1", "Site 2")
site1 <- c("a) Site 1")
site2 <- c("b) Site 2")
visweb(web1, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site1)
visweb(web2, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site2)
print(community)
visweb(web1, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site1)
visweb(web2, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site2)
print(community)
plot(community)
plot(community)
plot(print(community))
Titanic
plot(Titanic)
plotweb(web1)
plotweb(web2)
plotweb(web1)
text(0.5,2.5,labels=site1)
plotweb(web1)
text(0.5,2.5,labels=site1)
text(0.5,5,labels=site1)
plotweb(web1, main="Site 1")
plotweb(web1)
plotweb(web2)
plotweb(web1, add=T)
plotweb(web1)
plotweb(web1)
plotweb(web2)
par(mfrow=c(2,1))
web1 <- matrix(c(1,9,5,9,1,5), nrow=2, byrow=T)
web2 <- matrix(c(9,1,5,1,9,5), nrow=2, byrow=T)
rownames(web1) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web1) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
rownames(web2) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web2) <- c("Parasitoid sp. 1", "Parasitoid sp. 2", "Galls surviving")
community <- matrix(c(15,15,10,10,15,15,10,10), nrow=2, byrow=T)
colnames(community) <- c("Gall sp. 1", "Gall sp. 2", "Parasitoid sp. 1", "Parasitoid sp. 2")
rownames(community) <- c("Site 1", "Site 2")
site1 <- c("a) Site 1")
site2 <- c("b) Site 2")
visweb(web1, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site1)
visweb(web2, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site2)
print(community)
plotweb(web1)
plotweb(web1)
plotweb(web2)
par(mfrow=c(2,1))
web1 <- matrix(c(1,9,5,9,1,5), nrow=2, byrow=T)
web2 <- matrix(c(9,1,5,1,9,5), nrow=2, byrow=T)
rownames(web1) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web1) <- c("Ptoid sp. 1", "Ptoid sp. 2", "Galls surviving")
rownames(web2) <- c("Gall sp. 1", "Gall sp. 2")
colnames(web2) <- c("Ptoid sp. 1", "Ptoid sp. 2", "Galls surviving")
community <- matrix(c(15,15,10,10,15,15,10,10), nrow=2, byrow=T)
colnames(community) <- c("Gall sp. 1", "Gall sp. 2", "Ptoid sp. 1", "Ptoid sp. 2")
rownames(community) <- c("Site 1", "Site 2")
site1 <- c("a) Site 1")
site2 <- c("b) Site 2")
visweb(web1, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site1)
visweb(web2, type="none", text="interaction", plotsize=1)
text(0.5,2.5,labels=site2)
print(community)
plotweb(web1)
plotweb(web1)
plotweb(web2)
Species <- c(45, 329, 489)
Types <- c("Predators", "Herbivores", "Parasitoids")
plot(Species ~ Types)
SpeciesTypes <- cbind.data.frame(Species,Types)
plot(SpeciesTypes)
BritishInsectDiversity <- read.csv("~/Desktop/Parasitoid_Lecture/BritishInsectDiversity.csv")
viewData(BritishInsectDiversity)
plot(BritishInsectDiversity)
plot(Predators)
plot(BritishInsectDiversity$Predators)
with(BritishInsectDiversity, plot(Predators + Herbivores + Parasitoids))
c1 <- rep("Predators",45)
c1
c2 <- rep("Herbivores",329)
c3 <- rep("Parasitoids",489)
data <- rbind(c1,c2,c3)
data <- c(c1,c2,c3)
data
plot(data)
plot.factor(data)
data <- as.factor(data)
plot(data)
plot(data, main = "Species Diversity of British Insects")
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500))
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), type="S")
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cexlab=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.lab=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.lab=3, cex.axis=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.lab=3, cex.axis=3, cex.main=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.lab=3, cex.axis=3, cex.main=3, cex.sub=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.axis=3, cex.main=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex.lab = 3, cex.axis=3, cex.main=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex=3, cex.axis=3, cex.main=3)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500), cex=2, cex.axis=2, cex.main=2)
plot(data, main = "Species Diversity of British Insects", ylim=c(0,500))
require(knitr)
require(markdown)
knit('test.rmd', 'test.md')
ssCR
source('~/Dropbox/FoodWebs/Models.R')
ssCR
r <- 0.6
K <- 10.0
e <- 0.8
m <- 0.5
Ro <- 1.0
Tau <- 2.7
R <- 0.6
Time <- 25
p.ssCR <- c(r = r, K = K, e = e, m = m, Ro = Ro, Tau = Tau)
ssCR.1 <- ode(R, 1:Time, ssCR, p.ssCR)
library(deSolve)
ssCR.1 <- ode(R, 1:Time, ssCR, p.ssCR)
r <- 0.6
K <- 10.0
e <- 0.8
m <- 0.5
Ro <- 1.0
Tau <- 2.7
a <- 1.0 # not mentioned in McCann's book
R <- 0.6
Time <- 25
p.ssCR <- c(r = r, K = K, e = e, m = m, Ro = Ro, Tau = Tau)
ssCR.1 <- ode(R, 1:Time, ssCR, p.ssCR)
ssCR.1
pd
function(pd)
source('~/.active-rstudio-document', echo=TRUE)
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Hiso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Ciso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
CRjac2
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
CRjac2
C
Riso
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
Riso <- expression(r/a * (R + Ro) * (1 - R/K)) # set R = 0 and solved algebraically
C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
```
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
Riso <- expression(r/a * (R + Ro) * (1 - R/K)) # set R = 0 and solved algebraically
C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
CRjac2
C
R
eigen(CRjac2)
R
r
a
Ro
K
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- r/a * (R + Ro) * (1 - R/K)
#Riso <- expression(r/a * (R + Ro) * (1 - R/K)) # set R = 0 and solved algebraically
#C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
CRjac2
C
R
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
CRjac2
# parameter values
r <- 1.0 # per capita rate of increase in resource
K <- 2.0 # indicated as 1.0 in Fig 2.1 description, but I think this was a typo in the book.
e <- 0.5 # predator conversion efficiency
Ro <- 0.5 # half-saturation density of predator functional response
m <- 0.5 # mortality rate of predator
a <- 1.3 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Riso)
CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2)
# parameter values
r <- 1.0 # per capita rate of increase in resource
K <- 2.0 # indicated as 1.0 in Fig 2.1 description, but I think this was a typo in the book.
e <- 0.5 # predator conversion efficiency
Ro <- 0.5 # half-saturation density of predator functional response
m <- 0.5 # mortality rate of predator
a <- 1.3 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Riso)
(CRjac2 <- matrix(sapply(CRjac1, function(pd) eval(pd)), nrow = 2))
C
R
jacobian.roz.mac <- function(r = 1.0, K = 2.0, e = 0.5, Ro = 0.5, m = 0.5, a = 1.3){
#r <- 1.0 # per capita rate of increase in resource
#K <- 2.0 # indicated as 1.0 in Fig 2.1 description,   but I think this was a typo in the book.
#e <- 0.5 # predator conversion efficiency
#Ro <- 0.5 # half-saturation density of predator functional response
#m <- 0.5 # mortality rate of predator
#a <- 1.3 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
dR.dt <- expression(r * R * (1 - R / K) - a * C * R / (R + Ro))
dC.dt <- expression(e * a * C * R / (R + Ro) - m * C)
CRjac1 <- list(D(dR.dt,"R"), D(dC.dt, "R"), D(dR.dt, "C"), D(dC.dt, "C")) # making a list of the partial derivatives for the consumer resource model
R <- m * Ro / (e * a - m) # this doesn't make sense...because it is the consumer isocline
C <- eval(Riso)
matrix(sapply(CRjac1, function(partial.deriv) eval(partial.deriv)), nrow = 2)
}
jacobian.roz.mac()
jacobian.roz.mac(a=3)
lapply(seq(1,3,by=0.1),function(as) jacobian.roz.mac(a=as))
lapply(seq(1.1,3,by=0.1),function(as) jacobian.roz.mac(a=as))
jacob.attackrate.change <- lapply(seq(1.1,3,by=0.1),function(as) jacobian.roz.mac(a=as))
lapply(jacob.attackrate.change,"[",i=1,j=1)
sapply(jacob.attackrate.change,"[",i=1,j=1)
attach.rate.effect.herbiv <- sapply(jacob.attackrate.change,"[",i=1,j=1)
attack.rate.effect.herbiv <- sapply(jacob.attackrate.change,"[",i=1,j=1)
attack.rate.effect.res <- sapply(jacob.attackrate.change,"[",i=1,j=1)
plot(attack.rate.effect.res)
plot(attack.rate.effect.res,type='l')
attack.rate.effect.res[which(attack.rate.effect.res>0)
]```
attack.rate.effect.res[which(attack.rate.effect.res>0)]
attack.rate.effect.res[min(which(attack.rate.effect.res>0))]
res.positive.attack.rate <- attack.rate.effect.res[min(which(attack.rate.effect.res>0))]
seq.attack <- seq(1.1,3,by=0.1)
jacob.attackrate.change <- lapply(seq.attack,function(as) jacobian.roz.mac(a=as))
attack.rate.effect.res <- sapply(jacob.attackrate.change,"[",i=1,j=1)
plot(attack.rate.effect.res,type='l')
res.positive.attack.rate <- seq.attack[min(which(attack.rate.effect.res>0))]
res.positive.attack.rate
###########  set parameters and state variables for the R-M C-R model
# state variable values (initial values at beginning of "experiments")
R <- 0.6
C <- 0.1
i.state <- c(R=0.6,C=0.1)
# parameter values
r <- 1.0 # per capita rate of increase in resource
K <- 2.0 # indicated as 1.0 in Fig 2.1 description, but I think this was a typo in the book.
e <- 0.5 # predator conversion efficiency
Ro <- 0.5 # half-saturation density of predator functional response
m <- 0.5 # mortality rate of predator
a <- 1.7 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m) # create a vector for the parameters for experiment #1
#### setup experiment. This experiment essentially solves the model at the initial C and R densities, and takes the new C and R densities and reruns the model, and so on until the end of time.
Time <- 300 # set time scale
rm1 <- ode(i.state,1:Time, rmcr, p.rm1) # run the experiment
# plot graphs side by side
par(mfrow=c(1,3)) # plot graphs side-by-side
#### create resource isocline
Rx <- seq(0.1,2,0.1) # manipulating different Resource densities to solve R isocline.
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # set R = 0 and solved algebraically
RisoStable <- eval(Riso)
### create consumer isocline
Ciso <- expression(m * Ro / (e * a - m)) # set C = 0, and solved algebraically.
CisoStable <- eval(Ciso)
## Experiment 1: Ro = 0.5
Ro <- 0.5
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
# plot stability around consumer and resource isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlim = c(0,2), xlab="R", main="Half-saturation density = 0.5")
abline(v=CisoStable, lty = 2, col =2)
legend("topleft", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm1[-Time,2], rm1[-Time,3], rm1[-1,2], rm1[-1,3], length=0.1, lty=1) # trace stability across different time steps. Don't know why there are so many warnings
# plot densities
matplot(rm1[,1],rm1[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("right", c("R","C"), lty=1:2, col=1:2, bty="n")
jacob.attackrate.change
lapply(jacob.attackrate.change,eigen)
lapply(jacob.attackrate.change,function(x) eigen(x)[["values"]])
lapply(jacob.attackrate.change,function(x) max(eigen(x)[["values"]]))
lapply(jacob.attackrate.change,function(x) max(Re(eigen(x)[["values"]])))
sapply(jacob.attackrate.change,function(x) max(Re(eigen(x)[["values"]])))
plot(sapply(jacob.attackrate.change,function(x) max(Re(eigen(x)[["values"]]))))
plot(sapply(jacob.attackrate.change,function(x) max(Re(eigen(x)[["values"]]))),type='l')
max.real.eigen <- sapply(jacob.attackrate.change,function(x) max(Re(eigen(x)[["values"]])))
plot(max.real.eigen~seq.attack,type='l')
abline(h=0)
abline(v=1.7,lty=2)
