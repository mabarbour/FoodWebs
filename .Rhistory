curve(linearC, from=1, to=10, add=T, col=3)
quadD <- function(x) {6/(5 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
linearA <- function(x) {0.1*x}
linearB <- function(x) {0.09*x}
linearC <- function(x) {0.11*x}
curve(linearA, from=1, to=10)
curve(linearB, from=1, to=10, add=T, col=2)
curve(linearC, from=1, to=10, add=T, col=3)
quadD <- function(x) {1/(1 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(3 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {5/(2 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 - exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 - 2*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 + 2*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 + 10*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 + 100*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(2 + 1000*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {3/(2 + 1000*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {2/(2 + 1000*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
quadD <- function(x) {1/(1 + 1000*exp(-x))}
curve(quadD, 1, 10, add=T, col=1, lty=2)
linearA <- function(x) {0.1*x}
linearB <- function(x) {0.09*x}
linearC <- function(x) {0.11*x}
curve(linearA, from=1, to=10)
curve(linearB, from=1, to=10, add=T, lty=2)
curve(linearC, from=1, to=10, add=T, lty=3)
logD <- function(x) {1/(1 + 1000*exp(-x))}
logE <- function(x) {2/2 + 1000*exp(-x)}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
curve(logE, 1, 10, add=T, col=2, lty=2)
logE <- function(x) {2/2.1 + 1000*exp(-x)}
curve(logD, 1, 10, add=T, col=2, lty=1)
logE <- function(x) {1.9/2 + 1000*exp(-x)}
curve(logD, 1, 10, add=T, col=2, lty=1)
logE <- function(x) {1/2 + 1000*exp(-x)}
curve(logD, 1, 10, add=T, col=2, lty=1)
logE <- function(x) {2/2 + 1000*exp(-x)}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
logE <- function(x) {1.5/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
logE <- function(x) {1.1/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
linearA <- function(x) {0.05*x}
linearB <- function(x) {0.049*x}
linearC <- function(x) {0.051*x}
curve(linearA, from=1, to=10)
curve(linearB, from=1, to=10, add=T, lty=2)
curve(linearC, from=1, to=10, add=T, lty=3)
logD <- function(x) {1/(1 + 1000*exp(-x))}
logE <- function(x) {1.1/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
curve(linearA, from=1, to=10, ylim=c(0,1))
curve(linearB, from=1, to=10, add=T, lty=2)
curve(linearC, from=1, to=10, add=T, lty=3)
logD <- function(x) {1/(1 + 1000*exp(-x))}
logE <- function(x) {1.1/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
linearA <- function(x) {0.06*x}
linearB <- function(x) {0.055*x}
linearC <- function(x) {0.065*x}
curve(linearA, from=1, to=10, ylim=c(0,1))
curve(linearB, from=1, to=10, add=T, lty=2)
curve(linearC, from=1, to=10, add=T, lty=3)
logD <- function(x) {1/(1 + 1000*exp(-x))}
logE <- function(x) {0.9/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
curve(linearA, from=1, to=10, ylim=c(0,1), xlab="Gall Size", ylab="Survival Probability")
legend("bottomright", legend=c("Module 1", "Module 2"), col=1:2, lty=1)
linearA <- function(x) {0.06*x}
linearB <- function(x) {0.055*x}
linearC <- function(x) {0.065*x}
curve(linearA, from=1, to=10, ylim=c(0,1), xlab="Gall Size", ylab="Survival Probability")
curve(linearB, from=1, to=10, add=T, lty=2)
curve(linearC, from=1, to=10, add=T, lty=3)
logD <- function(x) {1/(1 + 1000*exp(-x))}
logE <- function(x) {0.9/(1 + 1000*exp(-x))}
curve(logD, 1, 10, add=T, col=2, lty=1)
curve(logE, 1, 10, add=T, col=2, lty=2)
legend("bottomright", legend=c("Module 1", "Module 2"), col=1:2, lty=1, bty="n")
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,1,0,1,1,0.1,1,0.9,0.1,0.9), byrows=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="none", plotsize=3)
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,1,0,1,1,0.1,1,0.9,0.1,0.9), byrows=T)
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,1,0,1,1,0.1,1,0.9,0.1,0.9), byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
hypoth.web
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,1,0,1,1,0.1,1,0.9,0.1,0.9), nrows=5, byrow=T)
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,1,0,1,1,0.1,1,0.9,0.1,0.9), nrow=5, byrow=T)
length(hypoth.web)
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,0.8,0.2,0.75,0.95,0.1,1,0.9,0.1,0.9), ncol=3, byrow=T)
hypoth.web
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
hypoth.web <- matrix(c(0,0.9,0,0,0.8,0,0,0.7,0,0.8,0.2,0.75,0.95,0.1,1), ncol=3, byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="none", plotsize=3)
hypoth.web <- matrix(c(0,0.9,0,0,0.95,0,0,0.85,0,0.8,0.2,0.75,0.95,0.1,1), ncol=3, byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="none", plotsize=3)
hypoth.web <- matrix(c(0,0.9,0,0,0.95,0,0,0.85,0,0.85,0.2,0.90,0.95,0.1,1), ncol=3, byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="none", plotsize=3)
hypoth.web <- matrix(c(0,0.9,0,0,0.95,0,0,0.85,0,0.85,0.07,0.90,0.95,0.05,1), ncol=3, byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="none", plotsize=3)
visweb(hypoth.web, type="none", plotsize=3, boxes=TRUE)
visweb(hypoth.web, type="none", plotsize=3, boxes=TRUE, square=B)
visweb(hypoth.web, type="none", plotsize=3, boxes=TRUE, square="B")
visweb(hypoth.web, type="none", plotsize=3, boxes=TRUE)
visweb(hypoth.web, type="none", plotsize=3, frame=TRUE)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE)
data(Safariland)
visweb(Safariland)
visweb(Safariland, type="diagonal", square="compartment", text="none",
frame=TRUE)
visweb(Safariland, type="nested", text="compartment")
## Not run:
visweb(Safariland, circles=TRUE,  boxes=FALSE,  labsize=1, circle.max=3,
text="no")
visweb(Safariland, circles=TRUE,  boxes=FALSE,  labsize=1,  text="no",
circle.max=1.8, outerbox.border="black")
visweb(Safariland, circles=TRUE,  boxes=TRUE, outerbox.col="orange",
labsize=1, circle.max=1.8, text="no")
visweb(Safariland,square="b",box.col="green",box.border="red")
cols <-0:(length(table(Safariland))-1) #define your colors here,length has to be the numbers of different entries (ranks of values in increasing order)
visweb(Safariland, square="defined", def.col=cols)
cols <-rgb(c(0:7/20,8:14/14),0,0)     #discontinuous color ramp...
cols[1] <- rgb(1,1,1) #set zero to white
visweb(Safariland, square="defined", def.col=cols)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, col=1:2)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, box.col=2)
hypoth.web <- matrix(c(0,0.9,0,0,0.95,0,0,0.85,0,0.85,0,0.90,0.95,0,1), ncol=3, byrow=T)
Genotypes <- c("Genotype A","Genotype B","Genotype C","Genotype D","Genotype E")
parasitoids <- c("Parasitoid 1", "Parasitoid 2", "Parasitoid 3")
rownames(hypoth.web) <- Genotypes
colnames(hypoth.web) <- parasitoids
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, box.col=2)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, square="compartment")
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, square="b", box.border=1:2)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, square="b", box.border=2:3)
visweb(hypoth.web, type="diagonal", plotsize=3, frame=TRUE, square="b", box.col=2:3)
visweb(hypoth.web, type="diagonal", plotsize=3, square="interaction", text="compartment")
setwd("~/Dropbox/FoodWebs") # set working directory
library("deSolve") # load required library
library("seqinr")
source('~/Dropbox/FoodWebs/Models.R') # source in R-M C-R model
#### setup experiment. This experiment essentially solves the model at the initial C and R densities, and takes the new C and R densities and reruns the model, and so on until the end of time.
Time <- 300 # set time scale
rm1 <- ode(i.state,1:Time, rmcr, p.rm1) # run the experiment
#### create resource isocline
Rx <- seq(0.1,2,0.1) # manipulating different Resource densities to solve R isocline.
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # set R = 0 and solved algebraically
RisoStable <- eval(Riso)
### create consumer isocline
Ciso <- expression(m * Ro / (e * a - m)) # set C = 0, and solved algebraically.
CisoStable <- eval(Ciso)
## Experiment 1: a = 0.5
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
# plot stability around consumer and resource isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlim = c(0,2), xlab="R", main="attack rate = 1.3")
abline(v=CisoStable, lty = 2, col =2)
legend("topleft", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm1[-Time,2], rm1[-Time,3], rm1[-1,2], rm1[-1,3], length=0.1, lty=1) # trace stability across different time steps. Don't know why there are so many warnings
# plot densities
matplot(rm1[,1],rm1[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("right", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 2: a = 1.0
###  adjust parameters
Ro <- 1.0
p.rm2 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
rm2 <- ode(i.state,1:Time, rmcr, p.rm2)
### adjust resource and consumer isoclines. IDEAS TO MAKE THIS LESS REDUNDANT???
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # adjusted attack rate
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m)) # adjusted attack rate
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
#### plot stabilities around consumer and resource isoclines.
plot(Rx, RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R", main="attack rate = 1.6")
abline(v=CisoStable, lty = 2, col =2)
legend("topright", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm2[-Time,2], rm2[-Time,3], rm2[-1,2], rm2[-1,3], length=0.1, lty=1)
#### plot consumer and resource densities
matplot(rm2[,1],rm2[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 3: Ro = 1.5
### adjust parameter values
Ro <- 1.5
p.rm3 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
Time <- 50 # same pattern at larger time values, but I adjusted it to see the pattern more clearly
rm3 <- ode(i.state,1:Time, rmcr, p.rm3)
### adjust consumer and resource isocline
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K))
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m))
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
### plot stabilities around resouce and consumer isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R",main="attack rate = 2.0")
abline(v=CisoStable, lty = 2, col = 2) # attack rate adjusted to a = 2.0
legend("topright", c("R-isocline","C-isocline"), lty=1:2, col=1:2, bty="n", cex=0.8)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm3[-Time,2], rm3[-Time,3], rm3[-1,2], rm3[-1,3], length=0.1, lty=1)
### plot densities
matplot(rm3[,1],rm3[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n", cex=0.8)
###########  set parameters and state variables for the R-M C-R model
# state variable values (initial values at beginning of "experiments")
R <- 0.6
C <- 0.1
i.state <- c(R=0.6,C=0.1)
# parameter values
r <- 1.0 # per capita rate of increase in resource
K <- 2.0 # indicated as 1.0 in Fig 2.1 description, but I think this was a typo in the book.
e <- 0.5 # predator conversion efficiency
Ro <- 0.5 # half-saturation density of predator functional response
m <- 0.5 # mortality rate of predator
a <- 1.3 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m) # create a vector for the parameters for experiment #1
#### setup experiment. This experiment essentially solves the model at the initial C and R densities, and takes the new C and R densities and reruns the model, and so on until the end of time.
Time <- 300 # set time scale
rm1 <- ode(i.state,1:Time, rmcr, p.rm1) # run the experiment
#### create resource isocline
Rx <- seq(0.1,2,0.1) # manipulating different Resource densities to solve R isocline.
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # set R = 0 and solved algebraically
RisoStable <- eval(Riso)
### create consumer isocline
Ciso <- expression(m * Ro / (e * a - m)) # set C = 0, and solved algebraically.
CisoStable <- eval(Ciso)
## Experiment 1: a = 0.5
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
# plot stability around consumer and resource isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlim = c(0,2), xlab="R", main="attack rate = 1.3")
abline(v=CisoStable, lty = 2, col =2)
legend("topleft", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm1[-Time,2], rm1[-Time,3], rm1[-1,2], rm1[-1,3], length=0.1, lty=1) # trace stability across different time steps. Don't know why there are so many warnings
# plot densities
matplot(rm1[,1],rm1[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("right", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 2: a = 1.0
###  adjust parameters
Ro <- 1.0
p.rm2 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
rm2 <- ode(i.state,1:Time, rmcr, p.rm2)
### adjust resource and consumer isoclines. IDEAS TO MAKE THIS LESS REDUNDANT???
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # adjusted attack rate
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m)) # adjusted attack rate
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
#### plot stabilities around consumer and resource isoclines.
plot(Rx, RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R", main="attack rate = 1.6")
abline(v=CisoStable, lty = 2, col =2)
legend("topright", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm2[-Time,2], rm2[-Time,3], rm2[-1,2], rm2[-1,3], length=0.1, lty=1)
#### plot consumer and resource densities
matplot(rm2[,1],rm2[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 3: Ro = 1.5
### adjust parameter values
Ro <- 1.5
p.rm3 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
Time <- 50 # same pattern at larger time values, but I adjusted it to see the pattern more clearly
rm3 <- ode(i.state,1:Time, rmcr, p.rm3)
### adjust consumer and resource isocline
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K))
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m))
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
### plot stabilities around resouce and consumer isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R",main="attack rate = 2.0")
abline(v=CisoStable, lty = 2, col = 2) # attack rate adjusted to a = 2.0
legend("topright", c("R-isocline","C-isocline"), lty=1:2, col=1:2, bty="n", cex=0.8)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm3[-Time,2], rm3[-Time,3], rm3[-1,2], rm3[-1,3], length=0.1, lty=1)
### plot densities
matplot(rm3[,1],rm3[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n", cex=0.8)
######## Experiment 2: Ro = 0.1
###  adjust parameters
Ro <- 0.1
p.rm2 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
rm2 <- ode(i.state,1:Time, rmcr, p.rm2)
### adjust resource and consumer isoclines. IDEAS TO MAKE THIS LESS REDUNDANT???
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # adjusted attack rate
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m)) # adjusted attack rate
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
#### plot stabilities around consumer and resource isoclines.
plot(Rx, RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R", main="attack rate = 1.6")
abline(v=CisoStable, lty = 2, col =2)
legend("topright", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm2[-Time,2], rm2[-Time,3], rm2[-1,2], rm2[-1,3], length=0.1, lty=1)
#### plot consumer and resource densities
matplot(rm2[,1],rm2[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n")
###########  set parameters and state variables for the R-M C-R model
# state variable values (initial values at beginning of "experiments")
R <- 0.6
C <- 0.1
i.state <- c(R=0.6,C=0.1)
# parameter values
r <- 1.0 # per capita rate of increase in resource
K <- 2.0 # indicated as 1.0 in Fig 2.1 description, but I think this was a typo in the book.
e <- 0.5 # predator conversion efficiency
Ro <- 0.5 # half-saturation density of predator functional response
m <- 0.5 # mortality rate of predator
a <- 1.3 # initial attack rate of 1.3 instead of 1.2 more closely replicates the figures in the book
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m) # create a vector for the parameters for experiment #1
## Experiment 1: Ro = 0.5
Ro <- 0.5
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
# plot stability around consumer and resource isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlim = c(0,2), xlab="R", main="attack rate = 1.3")
abline(v=CisoStable, lty = 2, col =2)
legend("topleft", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm1[-Time,2], rm1[-Time,3], rm1[-1,2], rm1[-1,3], length=0.1, lty=1) # trace stability across different time steps. Don't know why there are so many warnings
# plot densities
matplot(rm1[,1],rm1[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("right", c("R","C"), lty=1:2, col=1:2, bty="n")
#### create resource isocline
Rx <- seq(0.1,2,0.1) # manipulating different Resource densities to solve R isocline.
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # set R = 0 and solved algebraically
RisoStable <- eval(Riso)
### create consumer isocline
Ciso <- expression(m * Ro / (e * a - m)) # set C = 0, and solved algebraically.
CisoStable <- eval(Ciso)
Time <- 300 # set time scale
rm1 <- ode(i.state,1:Time, rmcr, p.rm1) # run the experiment
## Experiment 1: Ro = 0.5
Ro <- 0.5
p.rm1 <- c(r = r, e = e, a = a, K = K, Ro = Ro, m=m)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
# plot stability around consumer and resource isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlim = c(0,2), xlab="R", main="attack rate = 1.3")
abline(v=CisoStable, lty = 2, col =2)
legend("topleft", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm1[-Time,2], rm1[-Time,3], rm1[-1,2], rm1[-1,3], length=0.1, lty=1) # trace stability across different time steps. Don't know why there are so many warnings
# plot densities
matplot(rm1[,1],rm1[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("right", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 2: Ro = 0.1
###  adjust parameters
Ro <- 0.3
p.rm2 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
rm2 <- ode(i.state,1:Time, rmcr, p.rm2)
### adjust resource and consumer isoclines. IDEAS TO MAKE THIS LESS REDUNDANT???
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # adjusted attack rate
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m)) # adjusted attack rate
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
#### plot stabilities around consumer and resource isoclines.
plot(Rx, RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R", main="attack rate = 1.6")
abline(v=CisoStable, lty = 2, col =2)
legend("topright", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm2[-Time,2], rm2[-Time,3], rm2[-1,2], rm2[-1,3], length=0.1, lty=1)
#### plot consumer and resource densities
matplot(rm2[,1],rm2[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n")
###  adjust parameters
Ro <- 0.2
p.rm2 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
rm2 <- ode(i.state,1:Time, rmcr, p.rm2)
### adjust resource and consumer isoclines. IDEAS TO MAKE THIS LESS REDUNDANT???
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K)) # adjusted attack rate
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m)) # adjusted attack rate
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
#### plot stabilities around consumer and resource isoclines.
plot(Rx, RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R", main="attack rate = 1.6")
abline(v=CisoStable, lty = 2, col =2)
legend("topright", c("R-isocline","C-isocline"), lty=1:2, bty="n", cex=0.8, col=1:2)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm2[-Time,2], rm2[-Time,3], rm2[-1,2], rm2[-1,3], length=0.1, lty=1)
#### plot consumer and resource densities
matplot(rm2[,1],rm2[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n")
######## Experiment 3: Ro = 1.0
### adjust parameter values
Ro <- 1.0
p.rm3 <- c(r = r, e = e, a = a, K = K, Ro = Ro)
Time <- 50 # same pattern at larger time values, but I adjusted it to see the pattern more clearly
rm3 <- ode(i.state,1:Time, rmcr, p.rm3)
### adjust consumer and resource isocline
Riso <- expression(r/a * (Rx + Ro) * (1 - Rx/K))
RisoStable <- eval(Riso)
Ciso <- expression(m * Ro / (e * a - m))
CisoStable <- eval(Ciso)
# plot consumer functional response and consumer isocline
Cfr <- expression(a * C * Rx / (Rx + Ro))
CfrData <- eval(Cfr)
plot(Rx,CfrData, ylim=c(0,0.18), type = "l", ylab="Consumption Rate of Consumer", xlab="Resource Density")
abline(v=CisoStable, lty = 2, col =2)
rect(CisoStable,0,max(Rx),0.18, col=col2alpha("red",0.5)) # shaded area indicates where consumer population growth rate is greater than zero
### plot stabilities around resouce and consumer isoclines
plot(Rx,RisoStable, type = "l", ylab = "C", ylim=0:1, xlab="R",main="attack rate = 2.0")
abline(v=CisoStable, lty = 2, col = 2) # attack rate adjusted to a = 2.0
legend("topright", c("R-isocline","C-isocline"), lty=1:2, col=1:2, bty="n", cex=0.8)
points(i.state[1],i.state[2]) # starting point of experiment
arrows(rm3[-Time,2], rm3[-Time,3], rm3[-1,2], rm3[-1,3], length=0.1, lty=1)
### plot densities
matplot(rm3[,1],rm3[,c(2,3)], type = "l", ylab="Density", xlab="Time", ylim=c(0,2))
legend("topright", c("R","C"), lty=1:2, col=1:2, bty="n", cex=0.8)
