for(t in 1:Time) {
Rs[t+1,1] <- Rs[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs[t,2] <- Rs[t,1] * exp(B * (1 - Rs[t,1]/K))
}
# experiment 2
B = 0.6
Rs2 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs2[t+1,1] <- Rs2[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs2[t,2] <- Rs2[t,1] * exp(B * (1 - Rs[t,1]/K))
}
# experiment 3
B = 2.0
Rs3 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs3[t+1,1] <- Rs3[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs3[t,2] <- Rs3[t,1] * exp(B * (1 - Rs[t,1]/K))
}
plot(1:length(Rs[,1]),Rs[,1], xlab="Time", ylab="Resource Density", type = "l", ylim=c(0,3))
lines(1:length(Rs2[,1]),Rs2[,1], col=2, lty=2)
lines(1:length(Rs3[,1]),Rs3[,1], col=3, lty=3)
plot(Rs[,1],Rs[,2])
plot(Rs2[,1],Rs2[,2])
samp = seq(0,3,0.1)
exp(samp)
samp = -seq(0,3,0.1)
samp
exp(samp)
# set parameter and state variables for Ricker model
Rt <- 0.6
B <- 0.5 # replaces intrinsic growth rate
K <- 2.0
# setup experiment 1
Rs <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs[t+1,1] <- Rs[t,1] * exp(-B * (1 - Rs[t,1]/K))
Rs[t,2] <- Rs[t,1] * exp(-B * (1 - Rs[t,1]/K))
}
# experiment 2
B = 0.6
Rs2 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs2[t+1,1] <- Rs2[t,1] * exp(-B * (1 - Rs[t,1]/K))
Rs2[t,2] <- Rs2[t,1] * exp(-B * (1 - Rs[t,1]/K))
}
# experiment 3
B = 2.0
Rs3 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs3[t+1,1] <- Rs3[t,1] * exp(-B * (1 - Rs[t,1]/K))
Rs3[t,2] <- Rs3[t,1] * exp(-B * (1 - Rs[t,1]/K))
}
plot(1:length(Rs[,1]),Rs[,1], xlab="Time", ylab="Resource Density", type = "l", ylim=c(0,3))
lines(1:length(Rs2[,1]),Rs2[,1], col=2, lty=2)
lines(1:length(Rs3[,1]),Rs3[,1], col=3, lty=3)
plot(Rs[,1],Rs[,2])
# SCRIPT ricker
#    	Simulates dynamics of the determinstic Ricker model
#	N(t+1)=N(t) exp{ r(1-N(t)/K) }
graphics.off()
rm(list=ls(all=TRUE))
#********** SIMULATION PARAMETERS ***********
# time horizon
tmax=1000
# starting population size
Nc=10
# intrinsic rate of increase
# chaos begins at about 2.8
r=1
# equilibrium population size
K=20
#********************************************
startplot=tmax-50;
N=matrix(0,1,tmax+1)
N[1]=Nc
for (t in 1:tmax) N[t+1]=N[t]*exp( r*(1-N[t]/K) )
split.screen(c(2,1))
screen(1)
x=0:(1.5*K)
matplot(x,cbind(x,x*exp( r*(1-x/K) )),type="l",xlab="N[t]",ylab="N[t+1]",main="Ricker Model",lty=c("dashed","solid"),lwd=c(1,2))
screen(2)
plot(startplot:(tmax+1),N[startplot:(tmax+1)],type="l",xlab="Year, t",ylab="N[t]",main="Last 50 Years",lwd=2)
# SCRIPT ricker
#    	Simulates dynamics of the determinstic Ricker model
#	N(t+1)=N(t) exp{ r(1-N(t)/K) }
graphics.off()
rm(list=ls(all=TRUE))
#********** SIMULATION PARAMETERS ***********
# time horizon
tmax=1000
# starting population size
Nc=10
# intrinsic rate of increase
# chaos begins at about 2.8
r=1
# equilibrium population size
K=20
#********************************************
startplot=tmax-50;
N=matrix(0,1,tmax+1)
N[1]=Nc
for (t in 1:tmax) N[t+1]=N[t]*exp( r*(1-N[t]/K) )
#split.screen(c(2,1))
#screen(1)
x=0:(1.5*K)
matplot(x,cbind(x,x*exp( r*(1-x/K) )),type="l",xlab="N[t]",ylab="N[t+1]",main="Ricker Model",lty=c("dashed","solid"),lwd=c(1,2))
#screen(2)
plot(startplot:(tmax+1),N[startplot:(tmax+1)],type="l",xlab="Year, t",ylab="N[t]",main="Last 50 Years",lwd=2)
# SCRIPT ricker
#    	Simulates dynamics of the determinstic Ricker model
#	N(t+1)=N(t) exp{ r(1-N(t)/K) }
rm(list=ls(all=TRUE))
#********** SIMULATION PARAMETERS ***********
# time horizon
tmax=1000
# starting population size
Nc=10
# intrinsic rate of increase
# chaos begins at about 2.8
r=1
# equilibrium population size
K=20
#********************************************
startplot=tmax-50;
N=matrix(0,1,tmax+1)
N[1]=Nc
for (t in 1:tmax) N[t+1]=N[t]*exp( r*(1-N[t]/K) )
#split.screen(c(2,1))
#screen(1)
x=0:(1.5*K)
matplot(x,cbind(x,x*exp( r*(1-x/K) )),type="l",xlab="N[t]",ylab="N[t+1]",main="Ricker Model",lty=c("dashed","solid"),lwd=c(1,2))
#screen(2)
plot(startplot:(tmax+1),N[startplot:(tmax+1)],type="l",xlab="Year, t",ylab="N[t]",main="Last 50 Years",lwd=2)
N=matrix(0,1,Time+1)
Time
Time <- 25
N=matrix(0,1,Time+1)
N
N=matrix(0.1,1,Time+1)
N
plot(1:Time,N[t])
Time <- 25
B <- 1.5
N=matrix(0.1,1,Time+1)
for(t in 1:Time) N[t+1]=N[t]*exp(B*(1-N[t]/K) )
plot(1:Time,N[t])
N[t]
N
K <- 2
N=matrix(0.1,1,Time+1)
for(t in 1:Time) N[t+1]=N[t]*exp(B*(1-N[t]/K) )
plot(1:Time,N[t])
N
N[1,,]
N[,1,]
N[,,1]
N[1]
plot(1:Time,N[1:Time])
# set parameter and state variables for Ricker model
Rt <- 0.6
B <- 0.5 # replaces intrinsic growth rate
K <- 2.0
# setup experiment 1
Rs <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs[t+1,1] <- Rs[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs[t,2] <- Rs[t,1] * exp(B * (1 - Rs[t,1]/K))
}
# experiment 2
B = 0.6
Rs2 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs2[t+1,1] <- Rs2[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs2[t,2] <- Rs2[t,1] * exp(B * (1 - Rs[t,1]/K))
}
# experiment 3
B = 2.0
Rs3 <- data.frame(Rt = c(0.1,numeric(Time)),Rt1 = c(0,numeric(Time))) # empty variable with length of "Time" vector
for(t in 1:Time) {
Rs3[t+1,1] <- Rs3[t,1] * exp(B * (1 - Rs[t,1]/K))
Rs3[t,2] <- Rs3[t,1] * exp(B * (1 - Rs[t,1]/K))
}
plot(1:length(Rs[,1]),Rs[,1], xlab="Time", ylab="Resource Density", type = "l", ylim=c(0,3))
lines(1:length(Rs2[,1]),Rs2[,1], col=2, lty=2)
lines(1:length(Rs3[,1]),Rs3[,1], col=3, lty=3)
# setup experiments
Time <- 25
B1 <- 0.5
B2 <- 1.5
B3 <- 2.0
K <- 2
N1=matrix(0.1,1,Time+1)
for(t in 1:Time) N1[t+1]=N1[t]*exp(B1*(1-N1[t]/K) )
N2=matrix(0.1,1,Time+1)
for(t in 1:Time) N2[t+1]=N2[t]*exp(B2*(1-N2[t]/K) )
N3=matrix(0.1,1,Time+1)
for(t in 1:Time) N3[t+1]=N3[t]*exp(B3*(1-N3[t]/K) )
plot(1:Time,N1[1:Time],xlab="Time",ylab="Resource Density")
lines(1:Time,N2[1:Time],lty=2,col=2)
lines(1:Time,N3[1:Time],lty=3,col=3)
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density")
lines(1:Time,N2[1:Time],lty=2,col=2)
lines(1:Time,N3[1:Time],lty=3,col=3)
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],lty=2,col=2)
lines(1:Time,N3[1:Time],lty=3,col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"), lty=1:3,col=1:3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"), lty=1:3,col=1:3, bty="n")
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],lty=2,col=2)
lines(1:Time,N3[1:Time],lty=3,col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"), lty=1:3,col=1:3, bty="n")
plot(N1[1:Time],N1[2:Time])
plot(N1[1:Time],N1[2:Time+1])
plot(N1[1:Time],N1[2:(Time+1)])
plot(N1[1:Time],N1[2:(Time+1)], type="l")
plot(N1[1:Time],N1[2:(Time+1)], type="l")
lines(N2[1:Time],N2[2:(Time+1)], lty=2,col=2)
lines(N3[1:Time],N3[2:(Time+1)], lty=3,col=3)
plot(N1[1:Time],N1[2:(Time+1)], type="l", ylim=c(0,3))
lines(N2[1:Time],N2[2:(Time+1)], lty=2,col=2)
lines(N3[1:Time],N3[2:(Time+1)], lty=3,col=3)
plot(N1[1:Time],N1[2:(Time+1)], type="l", ylim=c(0,3), xlim=c(0,3))
lines(N2[1:Time],N2[2:(Time+1)], lty=2,col=2)
lines(N3[1:Time],N3[2:(Time+1)], lty=3,col=3)
Nt <- seq(0,3.0,0.1)
Nt
Nt1 <- Nt*exp(B1*(1-N1/K))
Nt1 <- Nt*exp(B1*(1-Nt/K))
Nt <- seq(0,3.0,0.1)
Nt1 <- Nt*exp(B1*(1-Nt/K))
Nt2 <- Nt*exp(B2*(1-Nt/K))
Nt3 <- Nt*exp(B3*(1-Nt/K))
plot(Nt,Nt1)
plot(Nt,Nt1,type="l")
lines(Nt,Nt2,lty=2,col=2)
lines(Nt,Nt3,lty=3,col=3)
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=2,col=2)
lines(Nt,Nt3,lty=3,col=3)
points(K,K)
points(K,K,bg=1)
points(K,K,pch=16)
NtData <- data.frame(Nt,Nt1,Nt2,Nt3)
NtData
lambda1 <- NtData[which(2.5),1] - NtData[which(1.5),1] # anybody know how to look for the specific number?
lambda1 <- NtData[26,1] - NtData[16,1] # anybody know how to look for the specific number?
lambda2 <- NtData[26,2] - NtData[16,2]
lambda3 <- NtData[26,3] - NtData[16,3]
lambda1
lambd2
lambda2
lambda3
1/0.5
0.5/1
0.46/1
1/0.46
lambda4 <- NtData[26,4] - NtData[16,4]
lambda4
par(mfrow=c(1,2))
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],lty=2,col=2)
lines(1:Time,N3[1:Time],lty=3,col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"), lty=1:3,col=1:3, bty="n")
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=2,col=2)
lines(Nt,Nt3,lty=3,col=3)
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
points(K,K,pch=16)
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],col=2)
lines(1:Time,N3[1:Time],col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"), lty=1:3,col=1:3, bty="n")
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),col=1:3, bty="n")
abline(a=3,b=-1,lty=2,col=1)
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
abline(a=3,b=-1,lty=2,col=1)
points(K,K,pch=16)
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
par(mfrow=c(1,2))
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],col=2)
lines(1:Time,N3[1:Time],col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),col=1:3, bty="n")
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
points(K,K,pch=16)
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
```{r}
# get everything setup
setwd("~/Dropbox/FoodWebs")
source('Models.R')
library(deSolve)
# set parameter and state variables for continuous logistic growth model
R <- 0.6
r <- 0.5
K <- 2.0
p.clg <- c(r=r,K=K)
# determine resource isocline
# run experiment 1
Time <- 25
clg.1 <- ode(R, 1:Time, clg, p.clg)
# run experiment 2
p.clg2 <-  c(r=1.0,K=K) # double the intrinsic growth rate
clg.2 <- ode(R, 1:Time, clg, p.clg2)
```
**Effects of increasing intrinsic growth rate on resource density**
```{r fig.width=7, fig.height=6}
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
```
A general theme for this book is that **population dynamic models that produce monotonic trajectories tend to increase in stability with increased production.**  McCann refers to these as *nonexcitable population dynamics.*
However, in nature, many populations tend to oscillate or exhibit *excitable population dynamics*.  So the above model doesn't usually apply to complex biological systems.  For example, in many populations, their denesity at a certain point has consequences on their density at some distant time in the future.  In other words, the population response is lagged, rather than instanteous in the previous model.  Now McCann considers the Ricker model, which incorporates discrete population dynamics.  He first examines how increasing growth rate (B in the Ricker Model) influences the population dynamics of the single species.
```{r}
# setup experiments
Time <- 25
B1 <- 0.5
B2 <- 1.5
B3 <- 2.0
K <- 2
# run experiments
N1=matrix(0.1,1,Time+1)
for(t in 1:Time) N1[t+1]=N1[t]*exp(B1*(1-N1[t]/K) )
N2=matrix(0.1,1,Time+1)
for(t in 1:Time) N2[t+1]=N2[t]*exp(B2*(1-N2[t]/K) )
N3=matrix(0.1,1,Time+1)
for(t in 1:Time) N3[t+1]=N3[t]*exp(B3*(1-N3[t]/K) )
# get data for phase-space graphs
Nt <- seq(0,3.0,0.1)
Nt1 <- Nt*exp(B1*(1-Nt/K))
Nt2 <- Nt*exp(B2*(1-Nt/K))
Nt3 <- Nt*exp(B3*(1-Nt/K))
NtData <- data.frame(Nt,Nt1,Nt2,Nt3)
```
In contrast to the continuous logistic growth model, the Ricker model is *destabilized* by increasing intrinsic growth rates.
```{r fig.width=7, fig.height=6}
par(mfrow=c(1,2))
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],col=2)
lines(1:Time,N3[1:Time],col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),col=1:3, bty="n")
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
points(K,K,pch=16)
```
Note that the absolute value of the slope at equilibrium indicates whether the dynamics are stable ( |slope| < 1 ) or unstable ( |slope| > 1) and not whether it is positive or negative.  This differs from continuous logistic growth model where negative real eigenvalues are stable, but positive values are unstable (eigenvalue = slope for this Ricker model)
# get everything setup
setwd("~/Dropbox/FoodWebs")
source('Models.R')
library(deSolve)
# set parameter and state variables for continuous logistic growth model
R <- 0.6
r <- 0.5
K <- 2.0
p.clg <- c(r=r,K=K)
# run experiment 1
Time <- 25
clg.1 <- ode(R, 1:Time, clg, p.clg)
# run experiment 2
p.clg2 <-  c(r=1.0,K=K) # double the intrinsic growth rate
clg.2 <- ode(R, 1:Time, clg, p.clg2)
source('Models.R')
source('Models.R')
clg.1 <- ode(R, 1:Time, clg, p.clg)
clg <- function(t,y,p) {
R <- y[1]
with(as.list(p), {
dR.dt <- r * R * (1 - R / K)
return(list(c(dR.dt)))
})
}
# set parameter and state variables for continuous logistic growth model
R <- 0.6
r <- 0.5
K <- 2.0
p.clg <- c(r=r,K=K)
# run experiment 1
Time <- 25
clg.1 <- ode(R, 1:Time, clg, p.clg)
# run experiment 2
p.clg2 <-  c(r=1.0,K=K) # double the intrinsic growth rate
clg.2 <- ode(R, 1:Time, clg, p.clg2)
```
**Effects of increasing intrinsic growth rate on resource density**
```{r fig.width=7, fig.height=6}
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
```
# setup experiments
Time <- 25
B1 <- 0.5
B2 <- 1.5
B3 <- 2.0
K <- 2
# run experiments
N1=matrix(0.1,1,Time+1)
for(t in 1:Time) N1[t+1]=N1[t]*exp(B1*(1-N1[t]/K) )
N2=matrix(0.1,1,Time+1)
for(t in 1:Time) N2[t+1]=N2[t]*exp(B2*(1-N2[t]/K) )
N3=matrix(0.1,1,Time+1)
for(t in 1:Time) N3[t+1]=N3[t]*exp(B3*(1-N3[t]/K) )
# get data for phase-space graphs
Nt <- seq(0,3.0,0.1)
Nt1 <- Nt*exp(B1*(1-Nt/K))
Nt2 <- Nt*exp(B2*(1-Nt/K))
Nt3 <- Nt*exp(B3*(1-Nt/K))
NtData <- data.frame(Nt,Nt1,Nt2,Nt3)
```
In contrast to the continuous logistic growth model, the Ricker model is *destabilized* by increasing intrinsic growth rates.
```{r fig.width=7, fig.height=6}
par(mfrow=c(1,2))
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],col=2)
lines(1:Time,N3[1:Time],col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),col=1:3, bty="n")
plot(Nt,Nt1,type="l",ylim=c(0,3))
lines(Nt,Nt2,lty=1,col=2)
lines(Nt,Nt3,lty=1,col=3)
abline(a=0,b=1,lty=2,col=1)
points(K,K,pch=16)
```
Riso <- expression(1-Rx/K)
Rx <- seq(0,2,0.1)
Riso <- expression(1-Rx/K)
RisoStable <- eval(Riso)
RisoStable
plot(Rx,RisoStable)
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value")
par(mfrow=c(1,2))
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value", ylim=c(0,2))
Riso1 <- expression(1-Rx/K) # there is another resource isocline at 0 = rR
lines(Rx, RisoStable2, col=2)
# get everything setup
setwd("~/Dropbox/FoodWebs")
source('Models.R')
library(deSolve)
# set parameter and state variables for continuous logistic growth model
R <- 0.6
r1 <- 0.5
r2 <- 1.0
K <- 2.0
p.clg <- c(r=r1,K=K)
# run experiment 1
Time <- 25
clg.1 <- ode(R, 1:Time, clg, p.clg)
# run experiment 2
p.clg2 <-  c(r=r2,K=K) # double the intrinsic growth rate
clg.2 <- ode(R, 1:Time, clg, p.clg2)
# evaluate resource isoclines
Rx <- seq(0,2,0.1)
Riso1 <- expression(1-Rx/K)
Riso2 <- expression(r1*Rx) # this one will change when growth rate is altered
Riso3 <- expression(r2*Rx)
RisoStable <- eval(Riso)
RisoStable2 <- eval(Riso2)
RisoStable3 <- eval(Riso3)
par(mfrow=c(1,2))
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value", ylim=c(0,2))
lines(Rx, RisoStable2, col=2)
lines(Rx, RisoStable3, col=3)
par(mfrow=c(1,2))
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value", ylim=c(0,2), main="Isoclines")
lines(Rx, RisoStable2, col=2)
lines(Rx, RisoStable3, col=3)
legend("topleft",c("(1 - R/K)","0.5 * R", "1.0 * R"), col=1:3)
legend("topleft",c("(1 - R/K)","0.5 * R", "1.0 * R"), col=1:3, bty="n")
plot(clg.1[,1], clg.1[,2], type="l", ylab="Resource Density", xlab="Time", )
lines(clg.2[,1], clg.2[,2], col=2, lty=2)
legend("bottomright",c("r = 0.5","r = 1.0"), lty=1:2, col=1:2, bty="n")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value", ylim=c(0,2), main="Isoclines")
lines(Rx, RisoStable2, col=2)
lines(Rx, RisoStable3, col=3)
legend("topleft",c("(1 - R/K)","0.5 * R", "1.0 * R"), col=1:3, bty="n")
legend("topleft",c("(1 - R/K)","0.5 * R", "1.0 * R"), lty=c(1,1,1), col=1:3, bty="n")
plot(Rx,RisoStable,type="l",xlab="Resource Density", ylab="Equilibrium value", ylim=c(0,2), main="Isoclines")
lines(Rx, RisoStable2, col=2)
lines(Rx, RisoStable3, col=3)
legend("topleft",c("(1 - R/K)","0.5 * R", "1.0 * R"), lty=c(1,1,1), col=1:3, bty="n")
source('Models.R')
source('Models.R')
plot(1:Time,N1[1:Time],type="l",xlab="Time",ylab="Resource Density",ylim=c(0,3))
lines(1:Time,N2[1:Time],col=2)
lines(1:Time,N3[1:Time],col=3)
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),col=1:3, bty="n")
legend("bottomright", c("r = 0.5","r = 1.5", "r = 2.0"),lty = c(1,1,1),col=1:3, bty="n")
